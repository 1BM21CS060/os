#include <stdio.h>

void printMatrix(int rows, int columns, int matrix[][columns]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

void matrixAddition(int rows, int columns, int matrix1[][columns], int matrix2[][columns]) {
    int result[rows][columns];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }

    printf("Resultant Matrix (Addition):\n");
    printMatrix(rows, columns, result);
}

void matrixSubtraction(int rows, int columns, int matrix1[][columns], int matrix2[][columns]) {
    int result[rows][columns];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            result[i][j] = matrix1[i][j] - matrix2[i][j];
        }
    }

    printf("Resultant Matrix (Subtraction):\n");
    printMatrix(rows, columns, result);
}

void matrixMultiplication(int rows1, int columns1, int matrix1[][columns1], int rows2, int columns2, int matrix2[][columns2]) {
    if (columns1 != rows2) {
        printf("Invalid dimensions for matrix multiplication.\n");
        return;
    }

    int result[rows1][columns2];

    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < columns2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < columns1; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    printf("Resultant Matrix (Multiplication):\n");
    printMatrix(rows1, columns2, result);
}

int sumPrincipalDiagonal(int size, int matrix[][size]) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += matrix[i][i];
    }
    return sum;
}

int sumNonPrincipalDiagonal(int size, int matrix[][size]) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += matrix[i][size - 1 - i];
    }
    return sum;
}

int sumRow(int row, int columns, int matrix[][columns]) {
    int sum = 0;
    for (int i = 0; i < columns; i++) {
        sum += matrix[row][i];
    }
    return sum;
}

int sumColumn(int rows, int column, int matrix[][column]) {
    int sum = 0;
    for (int i = 0; i < rows; i++) {
        sum += matrix[i][column];
    }
    return sum;
}

int isSymmetric(int size, int matrix[][size]) {
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (matrix[i][j] != matrix[j][i]) {
                return 0;
            }
        }
    }
    return 1;
}

int main() {
    int rows, columns;

    printf("Enter the number of rows in the matrix: ");
    scanf("%d", &rows);

    printf("Enter the number of columns in the matrix: ");
    scanf("%d", &columns);

    int matrix1[rows][columns], matrix2[rows][columns];

    printf("Enter the elements of the first matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            scanf("%d", &matrix1[i][j]);
        }
    }

    printf("Enter the elements of the second matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            scanf("%d", &matrix2[i][j]);
        }
    }

    int choice;
    while (1) {
        printf("\nMatrix Operations Menu:\n");
        printf("1. Addition\n");
        printf("2. Subtraction\n");
        printf("3. Multiplication\n");
        printf("4. Sum of Principal Diagonal\n");
        printf("5. Sum of Non-Principal Diagonal\n");
        printf("6. Sum of a Row\n");
        printf("7. Sum of a Column\n");
        printf("8. Print Transpose of a Matrix\n");
        printf("9. Check if Matrix is Symmetric\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                matrixAddition(rows, columns, matrix1, matrix2);
                break;
            case 2:
                matrixSubtraction(rows, columns, matrix1, matrix2);
                break;
            case 3:
                matrixMultiplication(rows, columns, matrix1, rows, columns, matrix2);
                break;
            case 4:
                printf("Sum of Principal Diagonal: %d\n", sumPrincipalDiagonal(rows, matrix1));
                break;
            case 5:
                printf("Sum of Non-Principal Diagonal: %d\n", sumNonPrincipalDiagonal(rows, matrix1));
                break;
            case 6:
                printf("Enter the row index (0-%d): ", rows - 1);
                int row;
                scanf("%d", &row);
                if (row >= 0 && row < rows) {
                    printf("Sum of Row %d: %d\n", row, sumRow(row, columns, matrix1));
                } else {
                    printf("Invalid row index.\n");
                }
                break;
            case 7:
                printf("Enter the column index (0-%d): ", columns - 1);
                int column;
                scanf("%d", &column);
                if (column >= 0 && column < columns) {
                    printf("Sum of Column %d: %d\n", column, sumColumn(rows, column, matrix1));
                } else {
                    printf("Invalid column index.\n");
                }
                break;
            case 8:
                printf("Transpose of the Matrix:\n");
                printMatrix(rows, columns, matrix1);
                break;
            case 9:
                if (isSymmetric(rows, matrix1)) {
                    printf("Matrix is Symmetric.\n");
                } else {
                    printf("Matrix is not Symmetric.\n");
                }
                break;
            case 0:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice.\n");
        }
    }
    return 0;
}
